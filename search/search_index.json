{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Below is a comprehensive solution to the projectile motion problem, structured as a Markdown document with embedded Python code for simulations, theoretical derivations, and visualizations. The response addresses all deliverables while keeping explanations concise yet detailed. Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Derivation of Governing Equations Projectile motion occurs under constant gravitational acceleration, with no initial forces other than the launch velocity. We assume a 2D plane, neglecting air resistance for simplicity. The fundamental equations arise from Newton\u2019s second law, where the only force is gravity acting downward. The acceleration is: x-direction : \\(a_x = 0\\) y-direction : \\(a_y = -g\\) , where \\(g = 9.81 \\, \\text{m/s}^2\\) . Integrating acceleration with respect to time: Velocity : \\(v_x(t) = v_0 \\cos \\theta\\) \\(v_y(t) = v_0 \\sin \\theta - g t\\) Position : \\(x(t) = (v_0 \\cos \\theta) t\\) \\(y(t) = (v_0 \\sin \\theta) t - \\frac{1}{2} g t^2\\) Here, \\(v_0\\) is the initial velocity, and \\(\\theta\\) is the angle of projection relative to the horizontal. These equations assume launch from the origin ( \\(x_0 = 0, y_0 = 0\\) ). Family of Solutions The equations form a parametric family of solutions, with free parameters: - Initial velocity ( \\(v_0\\) ): Scales the trajectory size. - Angle of projection ( \\(\\theta\\) ): Determines the shape of the parabolic path. - Gravitational acceleration ( \\(g\\) ): Affects the vertical motion and scales the trajectory. Varying these parameters generates different trajectories, from flat, short paths (low \\(\\theta\\) , small \\(v_0\\) ) to high, long arcs (near \\(\\theta = 45^\\circ\\) , large \\(v_0\\) ). Range Derivation The range is the horizontal distance traveled when the projectile returns to \\(y = 0\\) . Set \\(y(t) = 0\\) : \\((v_0 \\sin \\theta) t - \\frac{1}{2} g t^2 = 0\\) Factor out \\(t\\) : \\(t \\left( v_0 \\sin \\theta - \\frac{1}{2} g t \\right) = 0\\) Solutions are \\(t = 0\\) (launch) and: \\(t = \\frac{2 v_0 \\sin \\theta}{g}\\) Substitute into \\(x(t)\\) : \\(R = x\\left( \\frac{2 v_0 \\sin \\theta}{g} \\right) = (v_0 \\cos \\theta) \\cdot \\frac{2 v_0 \\sin \\theta}{g} = \\frac{2 v_0^2 \\sin \\theta \\cos \\theta}{g}\\) Using the identity \\(\\sin 2\\theta = 2 \\sin \\theta \\cos \\theta\\) : \\(R = \\frac{v_0^2 \\sin 2\\theta}{g}\\) This shows the range depends on \\(\\theta\\) , \\(v_0\\) , and \\(g\\) . 2. Analysis of the Range Dependence on Angle of Projection The term \\(\\sin 2\\theta\\) governs the angular dependence. Since \\(\\sin 2\\theta\\) peaks at \\(2\\theta = 90^\\circ\\) , or \\(\\theta = 45^\\circ\\) , the maximum range occurs at: \\(R_{\\text{max}} = \\frac{v_0^2}{g} \\quad (\\text{when } \\sin 2\\theta = 1)\\) For \\(\\theta < 45^\\circ\\) or \\(\\theta > 45^\\circ\\) , the range decreases symmetrically, as \\(\\sin 2(90^\\circ - \\theta) = \\sin 2\\theta\\) . Thus, angles like \\(30^\\circ\\) and \\(60^\\circ\\) yield identical ranges. Influence of Other Parameters Initial Velocity ( \\(v_0\\) ) : The range scales with \\(v_0^2\\) , so doubling \\(v_0\\) quadruples the range. Gravitational Acceleration ( \\(g\\) ) : The range is inversely proportional to \\(g\\) . On a planet with lower \\(g\\) , the range increases. Launch Height : If \\(y_0 \\neq 0\\) , the time to reach \\(y = 0\\) changes, modifying the range (addressed later). 3. Practical Applications The idealized model applies to: - Sports : Trajectories of soccer balls, golf balls, or javelins, where launch angle optimization is key. - Engineering : Artillery or rocket launches, requiring precise range calculations. - Astrophysics : Simplified models of orbital insertion or low-altitude satellite paths. Extensions to Real-World Scenarios Uneven Terrain : If the landing height differs from the launch height, solve \\(y(t) = y_{\\text{land}}\\) . For a height difference \\(h\\) : \\(y(t) = (v_0 \\sin \\theta) t - \\frac{1}{2} g t^2 = h\\) This yields a quadratic equation for \\(t\\) , and the range becomes: \\(R = (v_0 \\cos \\theta) t_{\\text{land}}\\) Air Resistance : Introduce a drag force proportional to velocity or its square, modifying the differential equations to: \\(m \\ddot{x} = -k \\dot{x}, \\quad m \\ddot{y} = -m g - k \\dot{y}\\) These require numerical solutions, as analytical forms are complex. 4. Implementation Below is a Python script to simulate projectile motion and visualize the range as a function of \\(\\theta\\) . import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # m/s^2 v0_values = [10, 20, 30] # Initial velocities (m/s) theta_deg = np.arange(0, 91, 1) # Angles from 0 to 90 degrees theta_rad = np.deg2rad(theta_deg) # Range function def range_projectile(v0, theta_rad, g=9.81): return (v0**2 * np.sin(2 * theta_rad)) / g # Plot range vs angle for different v0 plt.figure(figsize=(10, 6)) for v0 in v0_values: R = range_projectile(v0, theta_rad) plt.plot(theta_deg, R, label=f'v0 = {v0} m/s') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Range vs. Angle of Projection') plt.legend() plt.grid(True) plt.show() # Simulate a single trajectory (example: v0 = 20 m/s, theta = 45 deg) v0 = 20 theta = np.deg2rad(45) t_flight = (2 * v0 * np.sin(theta)) / g t = np.linspace(0, t_flight, 100) x = v0 * np.cos(theta) * t y = v0 * np.sin(theta) * t - 0.5 * g * t**2 plt.figure(figsize=(10, 6)) plt.plot(x, y) plt.xlabel('x (m)') plt.ylabel('y (m)') plt.title('Projectile Trajectory (v0 = 20 m/s, \u03b8 = 45\u00b0)') plt.grid(True) plt.show() Output Description Range Plot : Shows range vs. angle for \\(v_0 = 10, 20, 30 \\, \\text{m/s}\\) . Each curve peaks at \\(\\theta = 45^\\circ\\) , with higher \\(v_0\\) yielding larger ranges. Trajectory Plot : Displays the parabolic path for \\(v_0 = 20 \\, \\text{m/s}\\) , \\(\\theta = 45^\\circ\\) , confirming the theoretical range. Limitations and Extensions Limitations Idealized Model : Assumes no air resistance, constant gravity, and flat terrain. Launch Height : Ignores \\(y_0 \\neq 0\\) , which affects real-world scenarios like cliff launches. Drag and Wind : Neglects aerodynamic forces, critical for lightweight or fast projectiles. Suggestions for Realism Air Resistance : Solve the modified differential equations numerically using tools like scipy.integrate.odeint . Wind : Add a velocity-dependent force term to model crosswinds. Variable Terrain : Incorporate a height function \\(y_{\\text{land}}(x)\\) and solve for intersection points. Spin Effects : For sports applications, include Magnus forces for spinning objects. Conclusion This analysis reveals the elegance of projectile motion, with the range\u2019s dependence on \\(\\sin 2\\theta\\) highlighting the optimal \\(45^\\circ\\) angle. Variations in \\(v_0\\) and \\(g\\) scale the system, while extensions like drag or terrain require numerical tools. The model\u2019s simplicity belies its power to describe diverse phenomena, from sports to space exploration. This response includes: - A detailed derivation of the equations and range formula. - Analysis of parameter effects. - Python code for simulations and visualizations. - Discussion of real-world applications and model limitations. Let me know if you\u2019d like further refinements or additional scenarios (e.g., air resistance simulation)!","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#derivation-of-governing-equations","text":"Projectile motion occurs under constant gravitational acceleration, with no initial forces other than the launch velocity. We assume a 2D plane, neglecting air resistance for simplicity. The fundamental equations arise from Newton\u2019s second law, where the only force is gravity acting downward. The acceleration is: x-direction : \\(a_x = 0\\) y-direction : \\(a_y = -g\\) , where \\(g = 9.81 \\, \\text{m/s}^2\\) . Integrating acceleration with respect to time: Velocity : \\(v_x(t) = v_0 \\cos \\theta\\) \\(v_y(t) = v_0 \\sin \\theta - g t\\) Position : \\(x(t) = (v_0 \\cos \\theta) t\\) \\(y(t) = (v_0 \\sin \\theta) t - \\frac{1}{2} g t^2\\) Here, \\(v_0\\) is the initial velocity, and \\(\\theta\\) is the angle of projection relative to the horizontal. These equations assume launch from the origin ( \\(x_0 = 0, y_0 = 0\\) ).","title":"Derivation of Governing Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#family-of-solutions","text":"The equations form a parametric family of solutions, with free parameters: - Initial velocity ( \\(v_0\\) ): Scales the trajectory size. - Angle of projection ( \\(\\theta\\) ): Determines the shape of the parabolic path. - Gravitational acceleration ( \\(g\\) ): Affects the vertical motion and scales the trajectory. Varying these parameters generates different trajectories, from flat, short paths (low \\(\\theta\\) , small \\(v_0\\) ) to high, long arcs (near \\(\\theta = 45^\\circ\\) , large \\(v_0\\) ).","title":"Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-derivation","text":"The range is the horizontal distance traveled when the projectile returns to \\(y = 0\\) . Set \\(y(t) = 0\\) : \\((v_0 \\sin \\theta) t - \\frac{1}{2} g t^2 = 0\\) Factor out \\(t\\) : \\(t \\left( v_0 \\sin \\theta - \\frac{1}{2} g t \\right) = 0\\) Solutions are \\(t = 0\\) (launch) and: \\(t = \\frac{2 v_0 \\sin \\theta}{g}\\) Substitute into \\(x(t)\\) : \\(R = x\\left( \\frac{2 v_0 \\sin \\theta}{g} \\right) = (v_0 \\cos \\theta) \\cdot \\frac{2 v_0 \\sin \\theta}{g} = \\frac{2 v_0^2 \\sin \\theta \\cos \\theta}{g}\\) Using the identity \\(\\sin 2\\theta = 2 \\sin \\theta \\cos \\theta\\) : \\(R = \\frac{v_0^2 \\sin 2\\theta}{g}\\) This shows the range depends on \\(\\theta\\) , \\(v_0\\) , and \\(g\\) .","title":"Range Derivation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#dependence-on-angle-of-projection","text":"The term \\(\\sin 2\\theta\\) governs the angular dependence. Since \\(\\sin 2\\theta\\) peaks at \\(2\\theta = 90^\\circ\\) , or \\(\\theta = 45^\\circ\\) , the maximum range occurs at: \\(R_{\\text{max}} = \\frac{v_0^2}{g} \\quad (\\text{when } \\sin 2\\theta = 1)\\) For \\(\\theta < 45^\\circ\\) or \\(\\theta > 45^\\circ\\) , the range decreases symmetrically, as \\(\\sin 2(90^\\circ - \\theta) = \\sin 2\\theta\\) . Thus, angles like \\(30^\\circ\\) and \\(60^\\circ\\) yield identical ranges.","title":"Dependence on Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#influence-of-other-parameters","text":"Initial Velocity ( \\(v_0\\) ) : The range scales with \\(v_0^2\\) , so doubling \\(v_0\\) quadruples the range. Gravitational Acceleration ( \\(g\\) ) : The range is inversely proportional to \\(g\\) . On a planet with lower \\(g\\) , the range increases. Launch Height : If \\(y_0 \\neq 0\\) , the time to reach \\(y = 0\\) changes, modifying the range (addressed later).","title":"Influence of Other Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"The idealized model applies to: - Sports : Trajectories of soccer balls, golf balls, or javelins, where launch angle optimization is key. - Engineering : Artillery or rocket launches, requiring precise range calculations. - Astrophysics : Simplified models of orbital insertion or low-altitude satellite paths.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#extensions-to-real-world-scenarios","text":"Uneven Terrain : If the landing height differs from the launch height, solve \\(y(t) = y_{\\text{land}}\\) . For a height difference \\(h\\) : \\(y(t) = (v_0 \\sin \\theta) t - \\frac{1}{2} g t^2 = h\\) This yields a quadratic equation for \\(t\\) , and the range becomes: \\(R = (v_0 \\cos \\theta) t_{\\text{land}}\\) Air Resistance : Introduce a drag force proportional to velocity or its square, modifying the differential equations to: \\(m \\ddot{x} = -k \\dot{x}, \\quad m \\ddot{y} = -m g - k \\dot{y}\\) These require numerical solutions, as analytical forms are complex.","title":"Extensions to Real-World Scenarios"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"Below is a Python script to simulate projectile motion and visualize the range as a function of \\(\\theta\\) . import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # m/s^2 v0_values = [10, 20, 30] # Initial velocities (m/s) theta_deg = np.arange(0, 91, 1) # Angles from 0 to 90 degrees theta_rad = np.deg2rad(theta_deg) # Range function def range_projectile(v0, theta_rad, g=9.81): return (v0**2 * np.sin(2 * theta_rad)) / g # Plot range vs angle for different v0 plt.figure(figsize=(10, 6)) for v0 in v0_values: R = range_projectile(v0, theta_rad) plt.plot(theta_deg, R, label=f'v0 = {v0} m/s') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Range vs. Angle of Projection') plt.legend() plt.grid(True) plt.show() # Simulate a single trajectory (example: v0 = 20 m/s, theta = 45 deg) v0 = 20 theta = np.deg2rad(45) t_flight = (2 * v0 * np.sin(theta)) / g t = np.linspace(0, t_flight, 100) x = v0 * np.cos(theta) * t y = v0 * np.sin(theta) * t - 0.5 * g * t**2 plt.figure(figsize=(10, 6)) plt.plot(x, y) plt.xlabel('x (m)') plt.ylabel('y (m)') plt.title('Projectile Trajectory (v0 = 20 m/s, \u03b8 = 45\u00b0)') plt.grid(True) plt.show()","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#output-description","text":"Range Plot : Shows range vs. angle for \\(v_0 = 10, 20, 30 \\, \\text{m/s}\\) . Each curve peaks at \\(\\theta = 45^\\circ\\) , with higher \\(v_0\\) yielding larger ranges. Trajectory Plot : Displays the parabolic path for \\(v_0 = 20 \\, \\text{m/s}\\) , \\(\\theta = 45^\\circ\\) , confirming the theoretical range.","title":"Output Description"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#limitations-and-extensions","text":"","title":"Limitations and Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#limitations","text":"Idealized Model : Assumes no air resistance, constant gravity, and flat terrain. Launch Height : Ignores \\(y_0 \\neq 0\\) , which affects real-world scenarios like cliff launches. Drag and Wind : Neglects aerodynamic forces, critical for lightweight or fast projectiles.","title":"Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#suggestions-for-realism","text":"Air Resistance : Solve the modified differential equations numerically using tools like scipy.integrate.odeint . Wind : Add a velocity-dependent force term to model crosswinds. Variable Terrain : Incorporate a height function \\(y_{\\text{land}}(x)\\) and solve for intersection points. Spin Effects : For sports applications, include Magnus forces for spinning objects.","title":"Suggestions for Realism"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"This analysis reveals the elegance of projectile motion, with the range\u2019s dependence on \\(\\sin 2\\theta\\) highlighting the optimal \\(45^\\circ\\) angle. Variations in \\(v_0\\) and \\(g\\) scale the system, while extensions like drag or terrain require numerical tools. The model\u2019s simplicity belies its power to describe diverse phenomena, from sports to space exploration. This response includes: - A detailed derivation of the equations and range formula. - Analysis of parameter effects. - Python code for simulations and visualizations. - Discussion of real-world applications and model limitations. Let me know if you\u2019d like further refinements or additional scenarios (e.g., air resistance simulation)!","title":"Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Forced Damped Pendulum Simulation and Analysis import numpy as np import matplotlib.pyplot as plt === Parameters === gamma = 0.2 # Damping coefficient omega0 = 1.0 # Natural frequency (sqrt(g/L)) A = 1.2 # Driving force amplitude omega = 0.666 # Driving force frequency dt = 0.01 # Time step T = 200 # Total time n = int(T/dt) # Number of steps === Initial Conditions === theta = np.zeros(n) omega_dot = np.zeros(n) theta[0] = 0.2 # Initial angle omega_dot[0] = 0.0 # Initial angular velocity t = np.linspace(0, T, n) === Differential Equation === def derivatives(theta, omega_dot, t): dtheta_dt = omega_dot domega_dt = -gamma * omega_dot - omega0**2 * np.sin(theta) + A * np.cos(omega * t) return dtheta_dt, domega_dt === Runge-Kutta 4th Order Integration === for i in range(n - 1): k1_theta, k1_omega = derivatives(theta[i], omega_dot[i], t[i]) k2_theta, k2_omega = derivatives(theta[i] + 0.5 * dt * k1_theta, omega_dot[i] + 0.5 * dt * k1_omega, t[i] + 0.5 * dt) k3_theta, k3_omega = derivatives(theta[i] + 0.5 * dt * k2_theta, omega_dot[i] + 0.5 * dt * k2_omega, t[i] + 0.5 * dt) k4_theta, k4_omega = derivatives(theta[i] + dt * k3_theta, omega_dot[i] + dt * k3_omega, t[i] + dt) theta[i+1] = theta[i] + (dt / 6) * (k1_theta + 2 * k2_theta + 2 * k3_theta + k4_theta) omega_dot[i+1] = omega_dot[i] + (dt / 6) * (k1_omega + 2 * k2_omega + 2 * k3_omega + k4_omega) === Plot: Angular Displacement vs Time === plt.figure(figsize=(10, 4)) plt.plot(t, theta, label=\"Theta(t)\") plt.title(\"Forced Damped Pendulum: Angular Displacement vs Time\") plt.xlabel(\"Time\") plt.ylabel(\"Theta (rad)\") plt.grid(True) plt.legend() plt.tight_layout() plt.show() === Plot: Phase Space === plt.figure(figsize=(6, 6)) plt.plot(theta, omega_dot, lw=0.5) plt.title(\"Phase Space: Theta vs Angular Velocity\") plt.xlabel(\"Theta (rad)\") plt.ylabel(\"Omega (rad/s)\") plt.grid(True) plt.tight_layout() plt.show() === Plot: Poincare Section === poincare_t = np.arange(0, T, 2*np.pi/omega) poincare_indices = [int(i/dt) for i in poincare_t if int(i/dt) < len(theta)] poincare_theta = theta[poincare_indices] poincare_omega = omega_dot[poincare_indices] plt.figure(figsize=(6, 6)) plt.scatter(poincare_theta, poincare_omega, s=1) plt.title(\"Poincare Section\") plt.xlabel(\"Theta (rad)\") plt.ylabel(\"Omega (rad/s)\") plt.grid(True) plt.tight_layout() plt.show()","title":"Forced Damped Pendulum Simulation and Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#forced-damped-pendulum-simulation-and-analysis","text":"import numpy as np import matplotlib.pyplot as plt","title":"Forced Damped Pendulum Simulation and Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameters","text":"gamma = 0.2 # Damping coefficient omega0 = 1.0 # Natural frequency (sqrt(g/L)) A = 1.2 # Driving force amplitude omega = 0.666 # Driving force frequency dt = 0.01 # Time step T = 200 # Total time n = int(T/dt) # Number of steps","title":"=== Parameters ==="},{"location":"1%20Physics/1%20Mechanics/Problem_2/#initial-conditions","text":"theta = np.zeros(n) omega_dot = np.zeros(n) theta[0] = 0.2 # Initial angle omega_dot[0] = 0.0 # Initial angular velocity t = np.linspace(0, T, n)","title":"=== Initial Conditions ==="},{"location":"1%20Physics/1%20Mechanics/Problem_2/#differential-equation","text":"def derivatives(theta, omega_dot, t): dtheta_dt = omega_dot domega_dt = -gamma * omega_dot - omega0**2 * np.sin(theta) + A * np.cos(omega * t) return dtheta_dt, domega_dt","title":"=== Differential Equation ==="},{"location":"1%20Physics/1%20Mechanics/Problem_2/#runge-kutta-4th-order-integration","text":"for i in range(n - 1): k1_theta, k1_omega = derivatives(theta[i], omega_dot[i], t[i]) k2_theta, k2_omega = derivatives(theta[i] + 0.5 * dt * k1_theta, omega_dot[i] + 0.5 * dt * k1_omega, t[i] + 0.5 * dt) k3_theta, k3_omega = derivatives(theta[i] + 0.5 * dt * k2_theta, omega_dot[i] + 0.5 * dt * k2_omega, t[i] + 0.5 * dt) k4_theta, k4_omega = derivatives(theta[i] + dt * k3_theta, omega_dot[i] + dt * k3_omega, t[i] + dt) theta[i+1] = theta[i] + (dt / 6) * (k1_theta + 2 * k2_theta + 2 * k3_theta + k4_theta) omega_dot[i+1] = omega_dot[i] + (dt / 6) * (k1_omega + 2 * k2_omega + 2 * k3_omega + k4_omega)","title":"=== Runge-Kutta 4th Order Integration ==="},{"location":"1%20Physics/1%20Mechanics/Problem_2/#plot-angular-displacement-vs-time","text":"plt.figure(figsize=(10, 4)) plt.plot(t, theta, label=\"Theta(t)\") plt.title(\"Forced Damped Pendulum: Angular Displacement vs Time\") plt.xlabel(\"Time\") plt.ylabel(\"Theta (rad)\") plt.grid(True) plt.legend() plt.tight_layout() plt.show()","title":"=== Plot: Angular Displacement vs Time ==="},{"location":"1%20Physics/1%20Mechanics/Problem_2/#plot-phase-space","text":"plt.figure(figsize=(6, 6)) plt.plot(theta, omega_dot, lw=0.5) plt.title(\"Phase Space: Theta vs Angular Velocity\") plt.xlabel(\"Theta (rad)\") plt.ylabel(\"Omega (rad/s)\") plt.grid(True) plt.tight_layout() plt.show()","title":"=== Plot: Phase Space ==="},{"location":"1%20Physics/1%20Mechanics/Problem_2/#plot-poincare-section","text":"poincare_t = np.arange(0, T, 2*np.pi/omega) poincare_indices = [int(i/dt) for i in poincare_t if int(i/dt) < len(theta)] poincare_theta = theta[poincare_indices] poincare_omega = omega_dot[poincare_indices] plt.figure(figsize=(6, 6)) plt.scatter(poincare_theta, poincare_omega, s=1) plt.title(\"Poincare Section\") plt.xlabel(\"Theta (rad)\") plt.ylabel(\"Omega (rad/s)\") plt.grid(True) plt.tight_layout() plt.show()","title":"=== Plot: Poincare Section ==="},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}